addi r3, r0, 1      //use r3 as the number 1 
addi r4, r0, 11     //use r4 as the number 11 
addi r5, r0, 3      

->>> start

//random number generation 3rd way max 63:
//separate the 5th and 4th bit by shifting, then XOR them and put the bit at the end of the previously left shifted random number by 1 bit

right shift (unsigned) r6 r5 by 5. // save the 5th bit  
andi r7 r5 (5'b11111)              // getting rid of the 5th bit
right shift (unsigned) r7 by 4,    // save just the 4t bit
xor r8, r6, r7                     // XOR the bits
andi r8, r8 (1'b1)                 // we just want the least signifucant bit (the XOR bit)
left shift (unsigned) r5 by 1      // we left shift the previous number one bit so we can just add the XOR bit at the end
andi r5, by 6'b111111              // we anding r5 with 63 so it never goes over 63
add r5, r5, r8                     // add the XOR bit at the end

// the 8 lights:

addi r1, r0, 0
sub r4, r4, r3,
bne r4, r0, (-1) // branch if r4 !=r0
addi r4, r0, 11  // 11  because here we have +1 cycle and the next instr takes +1 cycle and every interation has 2 cycles

addi r1, r0, 1. // r1 =1 -> one light on
sub r4, r4, r3,
bne r4, r0, (-1) // branch if r4 !=r0
addi r4, r0, 11  // 11 because here we have +1 cycle and the next instr takes +1 cycle and every interation has 2 cycles


addi r1, r0, 10. // r1 =11 // -> two lights on
sub r4, r4, r3,
bne r4, r0, (-1) // branch if r4 !=r0
addi r4, r0, 11  // 11 because here we have +1 cycle and the next instr takes +1 cycle and every interation has 2 cycles

addi r1, r0, 100. // r1 =111 -> three lights on
sub r4, r4, r3,
bne r4, r0, (-1) // branch if r4 !=r0
addi r4, r0, 11  // 11 because here we have +1 cycle and the next instr takes +1 cycle and every interation has 2 cycles

addi r1, r0, 1000. // r1 =1111 -> four lights on
sub r4, r4, r3,
bne r4, r0, (-1) // branch if r4 !=r0
addi r4, r0, 11  // 11 because here we have +1 cycle and the next instr takes +1 cycle and every interation has 2 cycles

addi r1, r0, 10000. // r1 =11111 -> five lights on
sub r4, r4, r3,
bne r4, r0, (-1) // branch if r4 !=r0
addi r4, r0, 11  // 11 because here we have +1 cycle and the next instr takes +1 cycle and every interation has 2 cycles

addi r1, r0, 100000. // r1 =111111 -> six lights on
sub r4, r4, r3,
bne r4, r0, (-1) // branch if r4 !=r0
addi r4, r0, 11  // 11 because here we have +1 cycle and the next instr takes +1 cycle and every interation has 2 cycles

addi r1, r0, 1000000. // r1 =1111111 -> seven lights on
sub r4, r4, r3,
bne r4, r0, (-1) // branch if r4 !=r0
addi r4, r0, 11  // 11 because here we have +1 cycle and the next instr takes +1 cycle and every interation has 2 cycles

addi r1, r0, 10000000. // r1 =11111111 -> eight lights on

// the delay

srl/sra r2, r2, r3 //divide by 2(right shift by 1) because every iteration has 2 cycles
sub r2, r2, r3           
bne r2, r0, (-1) // branch if r2 !=r0  // random delay
addi r1, r0, 0 // turn off lights
j start